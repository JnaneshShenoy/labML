# Flight
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score


from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from scipy.stats import zscore


df = pd.read_csv('Clean_Dataset.csv')


# Drop unnecessary columns
df2 = df.drop(columns=['Unnamed: 0', 'flight'])


sns.set_theme(color_codes=True)
sns.barplot(data=df, x='airline', y='price', hue='class')
sns.countplot(data=df, x='stops', hue='airline')


# Convert data to Numeric
df['source_city'].unique()
df2['source_city']=df2['source_city'].replace(['Delhi'],'0')
df2['source_city']=df2['source_city'].replace(['Mumbai'],'1')
df2['source_city']=df2['source_city'].replace(['Bangalore'],'2')
df2['source_city']=df2['source_city'].replace(['Kolkata'],'3')
df2['source_city']=df2['source_city'].replace(['Hyderabad'],'4')
df2['source_city']=df2['source_city'].replace(['Chennai'],'5')


df['departure_time'].unique()
df2['departure_time']=df2['departure_time'].replace(['Evening'],'0')
df2['departure_time']=df2['departure_time'].replace(['Early_Morning'],'1')
df2['departure_time']=df2['departure_time'].replace(['Morning'],'2')
df2['departure_time']=df2['departure_time'].replace(['Afternoon'],'3')
df2['departure_time']=df2['departure_time'].replace(['Night'],'4')
df2['departure_time']=df2['departure_time'].replace(['Late_Night'],'5')


df['arrival_time'].unique()
df2['arrival_time']=df2['arrival_time'].replace(['Evening'],'0')
df2['arrival_time']=df2['arrival_time'].replace(['Early_Morning'],'1')
df2['arrival_time']=df2['arrival_time'].replace(['Morning'],'2')
df2['arrival_time']=df2['arrival_time'].replace(['Afternoon'],'3')
df2['arrival_time']=df2['arrival_time'].replace(['Night'],'4')
df2['arrival_time']=df2['arrival_time'].replace(['Late_Night'],'5')


df['destination_city'].unique()
df2['destination_city']=df2['destination_city'].replace(['Delhi'],'0')
df2['destination_city']=df2['destination_city'].replace(['Mumbai'],'1')
df2['destination_city']=df2['destination_city'].replace(['Bangalore'],'2')
df2['destination_city']=df2['destination_city'].replace(['Kolkata'],'3')
df2['destination_city']=df2['destination_city'].replace(['Hyderabad'],'4')
df2['destination_city']=df2['destination_city'].replace(['Chennai'],'5')


df['stops'].unique()
df2['stops']=df2['stops'].replace(['zero'],'0')
df2['stops']=df2['stops'].replace(['one'],'1')
df2['stops']=df2['stops'].replace(['two_or_more'],'2')


df['airline'].unique()
df2['airline']=df2['airline'].replace(['SpiceJet'],'0')
df2['airline']=df2['airline'].replace(['AirAsia'],'1')
df2['airline']=df2['airline'].replace(['Vistara'],'2')
df2['airline']=df2['airline'].replace(['GO_FIRST'],'3')
df2['airline']=df2['airline'].replace(['Indigo'],'4')
df2['airline']=df2['airline'].replace(['Air_India'],'5')


df['class'].unique()
df2['class']=df2['class'].replace(['Economy'],'0')
df2['class']=df2['class'].replace(['Business'],'1')
df2.head()


df2.dtypes


# Change object datatype into integer
df2['airline'] = pd.to_numeric(df2['airline'])
df2['source_city'] = pd.to_numeric(df2['source_city'])
df2['departure_time']=pd.to_numeric(df2['departure_time'])
df2['stops']=pd.to_numeric(df2['stops'])
df2['arrival_time']=pd.to_numeric(df2['arrival_time'])
df2['destination_city']=pd.to_numeric(df2['destination_city'])
df2['class']=pd.to_numeric(df2['class'])
df2.dtypes


# Heatmap
sns.heatmap(df2.corr(),fmt='.2g')


z = np.abs(zscore(df2))
data_clean = df2[(z < 2).all(axis=1)]
sns.heatmap(data_clean.corr(), fmt='.2g')


X = df2.drop('price', axis=1)
y = df2['price']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)


models = [
    ('Decision Tree Regressor', DecisionTreeRegressor(random_state=0)),
    ('Random Forest Regressor', RandomForestRegressor(random_state=0)),
    ('Adaboost Regressor', AdaBoostRegressor(random_state=0))
]


for name, model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)


    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mse)


    print(f'{name}:')
    print(f'MAE: {mae:.2f}, MSE: {mse:.2f}, R2: {r2:.2f}, RMSE: {rmse:.2f},\n')


  



# Breast Cancer
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


import scipy.stats as stats
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score


from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.linear_model import LogisticRegression


sns.set_theme(color_codes=True)
df = pd.read_csv('BreastCancer.csv')
df
df.isnull().sum()


df_copy = df.copy(deep = True)
col_set =  ['Age','BMI','Glucose','Insulin','HOMA','Leptin','Adiponectin','Resistin','MCP.1']
df_copy[col_set] = df_copy[col_set].replace(0,np.NaN)




# Showing the Count of NANs
print(df_copy.isnull().sum())
print(df.Classification.value_counts())


sns.countplot(df['Classification'])


sns.boxplot(x=df["Glucose"])


import scipy.stats as stats
z = np.abs(stats.zscore(df))
data_clean = df[(z<3).all(axis = 1)]
data_clean.shape


sns.heatmap(data_clean.corr())
corr = data_clean[data_clean.columns[1:]].corr()['Classification'][:-1]
plt.plot(corr)
plt.xticks(rotation=90)
plt.show()


X = data_clean.drop('Classification', axis=1)
y = data_clean['Classification']


X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1,random_state=0)


# Define the models
models = [
    ('Decision Tree', DecisionTreeClassifier(random_state=0)),
    ('Random Forest', RandomForestClassifier(random_state=0)),
    ('SVM', svm.SVC(random_state=0)),
    ('Logistic Regression', LogisticRegression(random_state=0))
]


# Evaluate the models
for name, model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f'Model: {name}')
    print(f'Accuracy Score: {round(accuracy_score(y_test, y_pred)*100 ,2)}%')
    print(f'F-1 Score: {f1_score(y_test, y_pred)}')
    print(f'Precision Score: {precision_score(y_test, y_pred)}')
    print(f'Recall Score: {recall_score(y_test, y_pred)}')
    print()